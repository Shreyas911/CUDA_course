3. prac1b.cu has 2 new commands 

checkCudaErrors (for individual CUDA commands execution)
getLastCudaError (for kernel execution)

4. 

nblocks = 0

prac1a just runs with no output to terminal!
prac1b - CUDA error at prac1b.cu:47 code=35(cudaErrorInsufficientDriver) "cudaMalloc((void **)&d_x, nsize*sizeof(float))"

Allocate too much memory.

nsize    = 10000000000000000000*nblocks*nthreads ;

prac1a just runs with no output to terminal!
prac1b - CUDA error at prac1b.cu:49 code=2(cudaErrorMemoryAllocation) "cudaMalloc((void **)&d_x, nsize*sizeof(float))"

Mismatch in size of h_x and d_x
cudaMalloc((void **)&d_x, (nsize-1)*sizeof(float));

prac1a -

 n,  x  =  0  0.000000 
 n,  x  =  1  0.000000 
 n,  x  =  2  0.000000 
 n,  x  =  3  0.000000 
 n,  x  =  4  0.000000 
 n,  x  =  5  0.000004 
 n,  x  =  6  853.049744 
 n,  x  =  7  70368252136130106899061276672.000000 
 n,  x  =  8  71852900931264319586304.000000 
 n,  x  =  9  279512234105866551296.000000 
 n,  x  =  10  4306477916105419522048.000000 
 n,  x  =  11  0.000000 
 n,  x  =  12  4158763507502364491776.000000 
 n,  x  =  13  4757341009062551339377543348224.000000 
 n,  x  =  14  204514669120567902208.000000 
 n,  x  =  15  0.000000 

prac1b -

CUDA error at prac1b.cu:58 code=1(cudaErrorInvalidValue) "cudaMemcpy(h_x,d_x,nsize*sizeof(float), cudaMemcpyDeviceToHost)" 

5. 

prac1a_part5.cu (modify prac1b.cu similarly)

Output -

8
9
10
11
12
13
14
15
0
1
2
3
4
5
6
7
 n,  x  =  0  0.000000 
 n,  x  =  1  1.000000 
 n,  x  =  2  2.000000 
 n,  x  =  3  3.000000 
 n,  x  =  4  4.000000 
 n,  x  =  5  5.000000 
 n,  x  =  6  6.000000 
 n,  x  =  7  7.000000 
 n,  x  =  8  0.000000 
 n,  x  =  9  1.000000 
 n,  x  =  10  2.000000 
 n,  x  =  11  3.000000 
 n,  x  =  12  4.000000 
 n,  x  =  13  5.000000 
 n,  x  =  14  6.000000 
 n,  x  =  15  7.000000 

Notice how the outputs of the warps (each warp is 32 threads) stays together. However in this example it's not clear fully if it's actually the case. Try nblocks  = 1, nthreads = 64. Now, we have only one block and 2 warps and it is clear that the output of the warps stays together.

32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
 n,  x  =  0  0.000000 
 n,  x  =  1  1.000000 
 n,  x  =  2  2.000000 
 n,  x  =  3  3.000000 
 n,  x  =  4  4.000000 
 n,  x  =  5  5.000000 
 n,  x  =  6  6.000000 
 n,  x  =  7  7.000000 
 n,  x  =  8  8.000000 
 n,  x  =  9  9.000000 
 n,  x  =  10  10.000000 
 n,  x  =  11  11.000000 
 n,  x  =  12  12.000000 
 n,  x  =  13  13.000000 
 n,  x  =  14  14.000000 
 n,  x  =  15  15.000000 
 n,  x  =  16  16.000000 
 n,  x  =  17  17.000000 
 n,  x  =  18  18.000000 
 n,  x  =  19  19.000000 
 n,  x  =  20  20.000000 
 n,  x  =  21  21.000000 
 n,  x  =  22  22.000000 
 n,  x  =  23  23.000000 
 n,  x  =  24  24.000000 
 n,  x  =  25  25.000000 
 n,  x  =  26  26.000000 
 n,  x  =  27  27.000000 
 n,  x  =  28  28.000000 
 n,  x  =  29  29.000000 
 n,  x  =  30  30.000000 
 n,  x  =  31  31.000000 
 n,  x  =  32  32.000000 
 n,  x  =  33  33.000000 
 n,  x  =  34  34.000000 
 n,  x  =  35  35.000000 
 n,  x  =  36  36.000000 
 n,  x  =  37  37.000000 
 n,  x  =  38  38.000000 
 n,  x  =  39  39.000000 
 n,  x  =  40  40.000000 
 n,  x  =  41  41.000000 
 n,  x  =  42  42.000000 
 n,  x  =  43  43.000000 
 n,  x  =  44  44.000000 
 n,  x  =  45  45.000000 
 n,  x  =  46  46.000000 
 n,  x  =  47  47.000000 
 n,  x  =  48  48.000000 
 n,  x  =  49  49.000000 
 n,  x  =  50  50.000000 
 n,  x  =  51  51.000000 
 n,  x  =  52  52.000000 
 n,  x  =  53  53.000000 
 n,  x  =  54  54.000000 
 n,  x  =  55  55.000000 
 n,  x  =  56  56.000000 
 n,  x  =  57  57.000000 
 n,  x  =  58  58.000000 
 n,  x  =  59  59.000000 
 n,  x  =  60  60.000000 
 n,  x  =  61  61.000000 
 n,  x  =  62  62.000000 
 n,  x  =  63  63.000000 

6.

prac1b_part6.cu

Thread = 8, x = 24.000000
Thread = 9, x = 27.000000
Thread = 10, x = 30.000000
Thread = 11, x = 33.000000
Thread = 12, x = 36.000000
Thread = 13, x = 39.000000
Thread = 14, x = 42.000000
Thread = 15, x = 45.000000
Thread = 0, x = 0.000000
Thread = 1, x = 3.000000
Thread = 2, x = 6.000000
Thread = 3, x = 9.000000
Thread = 4, x = 12.000000
Thread = 5, x = 15.000000
Thread = 6, x = 18.000000
Thread = 7, x = 21.000000
 n,  x  =  0  0.000000 
 n,  x  =  1  3.000000 
 n,  x  =  2  6.000000 
 n,  x  =  3  9.000000 
 n,  x  =  4  12.000000 
 n,  x  =  5  15.000000 
 n,  x  =  6  18.000000 
 n,  x  =  7  21.000000 
 n,  x  =  8  24.000000 
 n,  x  =  9  27.000000 
 n,  x  =  10  30.000000 
 n,  x  =  11  33.000000 
 n,  x  =  12  36.000000 
 n,  x  =  13  39.000000 
 n,  x  =  14  42.000000 
 n,  x  =  15  45.000000 

7. vimdiff prac1b.cu and prac1c.cu to see the difference! 1c only uses one array imnstead of two for host and device.
